generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH
  OTHER
}

enum AuthRole {
  USER
  VENDOR
  SUPERUSER
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId   Int?
  children   Category[] @relation("CategoryHierarchy")
  activities Activity[]
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  phone          String?
  avatar         String?
  preferences    Json?
  friends        User[]          @relation("UserFriends")
  friendOf       User[]          @relation("UserFriends")
  pendingFriends User[]          @relation("PendingFriends")
  pendingFrom    User[]          @relation("PendingFriends")
  liked          Activity[]      @relation("LikedActivities")
  subscribed     Activity[]      @relation("SubscribedActivities")
  calendar       CalendarEvent[]
  payments       Payment[]
  auth           Auth[]
}

model Vendor {
  id          Int        @id @default(autoincrement())
  name        String
  phone       String?
  location    String?
  description String?
  rating      Float?     @default(0)
  activities  Activity[]
  payments    Payment[]
  auth        Auth[]
}

model Activity {
  id             Int             @id @default(autoincrement())
  vendor         Vendor          @relation(fields: [vendorId], references: [id])
  vendorId       Int
  name           String
  description    String
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  duration       String?
  price          Float
  capacity       Int
  location       String
  availability   Json?
  images         Json?
  quota          Int?
  discount       Float?          @default(0)
  timestamp      DateTime        @default(now())
  likedBy        User[]          @relation("LikedActivities")
  subscribedBy   User[]          @relation("SubscribedActivities")
  calendarEvents CalendarEvent[]
  Payment        Payment[]
}

model CalendarEvent {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
  startTime  DateTime
  endTime    DateTime
  timestamp  DateTime  @default(now())
}

model Payment {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  vendor     Vendor        @relation(fields: [vendorId], references: [id])
  vendorId   Int
  activity   Activity      @relation(fields: [activityId], references: [id])
  activityId Int
  amount     Float
  status     PaymentStatus
  method     PaymentMethod
  timestamp  DateTime      @default(now())
}

model Auth {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String?
  firebaseId         String?  @unique
  verified           Boolean  @default(false)
  role               AuthRole
  accessToken        String?  @unique
  verificationToken  String?  @unique
  passwordResetToken String?  @unique
  user               User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?     @unique
  vendor             Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId           Int?     @unique
  timestamp          DateTime @default(now())
}
